name: genai-system-design

services:
  backend_server:
    build: .
    ports:
      - "8000:8000"
    expose:
      - 8000
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: vectordb
      POSTGRES_URL: postgres
    links:
      - postgres
    develop:
      watch:
        - action: sync+restart
          path: ./app/asgi_server.py
          target: ./asgi_server.py
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
      redis:
        condition: service_healthy
        restart: false
    env_file:
      - .env
  # mistral:
  #   image: ai/mistral:latest
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     ACCEPT_EULA: "true"
  
  postgres:
    image: pgvector/pgvector:pg17
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: vectordb
    ports:
      - "5432:5432"
    expose:
      - 5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
  postgresSetup:
    image: pgvector/pgvector:pg17
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
    links:
      - postgres
    environment:
      PGPASSWORD: pass
    restart: "no"
    entrypoint: ["psql", "-h", "postgres", "-U", "root", "-d", "vectordb", "-a", "-f", "/vectorInit.sql"]
    volumes:
      - ./vectorInit.sql:/vectorInit.sql
  redis:
    image: redis/redis-stack-server:latest
    ports:
      - "6379:6379"
    volumes:      
    - cache:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

volumes:
  cache:
    driver: local